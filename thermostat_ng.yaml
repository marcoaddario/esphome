substitutions:
  haEnvironmentSensorName: sensor.kitchen_temperature
  haWeatherSensorName: sensor.yorkhome_realfeel_temperature

esphome:
  name: thermostat_ng
  platform: ESP32
  board: ttgo-t1
  on_boot:
    priority: -10
    then:
      - sensor.rotary_encoder.set_value:
          id: rotaryEncoder
          value: 200
      - display.page.show: page1
      - component.update: st7789vdisplay  

color:
  - id: light_red
    red: 100%
    green: 20%
    blue: 25%
    white: 0%
    
  - id: orange
    red: 100%
    green: 65%
    blue: 0%
    white: 0%

#web_server:
#  port: 80    

wifi:
  ssid: !secret WIFI_SSID
  password: !secret WIFI_Password
  domain: .lan



# Enable logging
logger:
  level: debug
  

# Enable OTA updates
ota:
  password: !secret OTA_Password

# Enable Home Assistant API
api:
  
globals:
  - id: ha_online
    type: bool
    initial_value: 'false'
  - id: activeDisplayPage
    type: int
    initial_value: '1'
  - id: programmingMode
    type: int
    initial_value: '0'
    # 0: unset
    # 1: DAY1
    # 2: DAY2
    # 3: NIGHT
    #10: Self mode
  - id: haOfflineCounter
    type: int
    initial_value: '0'
  - id: autonomousMode
    type: bool
    initial_value: 'false'
  - id: boostMode
    type: bool
    initial_value: 'false'
  - id: boostDurationMinFallback
    type: int
    initial_value: '15'
  - id: boostCountdownSec
    type: int
  - id: isTemperatureInternal
    type: boolean
    initial_value: 'true'
  - id: idleTimeoutCounter
    type: int
    initial_value: '0'

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True
  
# (Fonts - folder 'images')
font:

  - file: 'fonts/TahomaRegular.ttf'
    id: taoma20
    size: 20
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - file: 'fonts/TahomaRegular.ttf'
    id: taoma30
    size: 30
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - file: 'fonts/TahomaRegular.ttf'
    id: taoma40
    size: 40
    glyphs: '!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  

#Icons 128x128 (folder 'images')
image:
#0-default.png
  - file: "images/0-default.png"
    id: wpng_0
    type: RGB24
#1-clear-night.png
  - file: "images/1-clear-night.png"
    id: wpng_1
    type: RGB24
#2-cloudy.png
  - file: "images/2-cloudy.png"
    id: wpng_2
    type: RGB24
#3-fog.png
  - file: "images/3-fog.png"
    id: wpng_3
    type: RGB24
#4-hail.png
  - file: "images/4-hail.png"
    id: wpng_4
    type: RGB24
#5-lightning.png
  - file: "images/5-lightning.png"
    id: wpng_5
    type: RGB24
#6-lightning-rainy.png
  - file: "images/6-lightning-rainy.png"
    id: wpng_6
    type: RGB24
#7-partlycloudy.png
  - file: "images/7-partlycloudy.png"
    id: wpng_7
    type: RGB24
#8-pouring.png
  - file: "images/8-pouring.png"
    id: wpng_8
    type: RGB24
#9-rainy.png
  - file: "images/9-rainy.png"
    id: wpng_9
    type: RGB24
#10-snowy.png
  - file: "images/10-snowy.png"
    id: wpng_10
    type: RGB24
#11-snowy-rainy.png
  - file: "images/11-snowy-rainy.png"
    id: wpng_11
    type: RGB24
#12-sunny.png
  - file: "images/12-sunny.png"
    id: wpng_12
    type: RGB24
#13-windy.png
  - file: "images/13-windy.png"
    id: wpng_13
    type: RGB24
#14-windy-variant.png
  - file: "images/14-windy-variant.png"
    id: wpng_14
    type: RGB24
#15-exceptional.png
  - file: "images/15-exceptional.png"
    id: wpng_15
    type: RGB24
# home assistant link
  - file: images/ha.png
    id: ha_ok
    type: RGB24
# home assistant no link
  - file: images/ha_offline.png
    id: ha_ko
    type: RGB24
# Heating ON
  - file: images/heatingon.png
    id: imgHeatingOn
    type: RGB24
    
  
display:
  - platform: st7789v
    id: st7789vdisplay
    reset_pin: GPIO23
    dc_pin: GPIO16
    cs_pin: GPIO5
    backlight_pin: GPIO4
    brightness: 25%
    update_interval: 1s
    pages:
      - id: page1
        # weather 
        lambda: |-
          it.set_rotation(DISPLAY_ROTATION_0_DEGREES);

          if (id(curent_weather).state == "clear-night")
          {
             it.image(5, 25, id(wpng_1));
          }
          else if (id(curent_weather).state == "cloudy")
          {
             it.image(5, 25, id(wpng_2));
          }
          else if (id(curent_weather).state == "partlycloudy")
          {
            it.image(5, 25, id(wpng_2));
          }
          else if (id(curent_weather).state == "fog")
          {
             it.image(5, 25, id(wpng_3));
          }
          else if (id(curent_weather).state == "hail")
          {
             it.image(5, 25, id(wpng_4));
          }
          else if (id(curent_weather).state == "lightning")
          {
             it.image(5, 25, id(wpng_5));
          }
          else if (id(curent_weather).state == "lightning-rainy")
          {
             it.image(5, 25, id(wpng_6));
          }
          else if (id(curent_weather).state == "partlycloudy")
          {
             it.image(5, 25, id(wpng_7));
          }
          else if (id(curent_weather).state == "pouring")
          {
             it.image(5, 25, id(wpng_8));
          }
          else if (id(curent_weather).state == "rainy")
          {
             it.image(5, 25, id(wpng_9));
          }
          else if (id(curent_weather).state == "snowy")
          {
             it.image(5, 25, id(wpng_10));
          }
          else if (id(curent_weather).state == "snowy-rainy'")
          {
             it.image(5, 25, id(wpng_11));
          }
          else if (id(curent_weather).state == "sunny")
          {
             it.image(5, 25, id(wpng_12));
          }
          else if (id(curent_weather).state == "windy")
          {
             it.image(5, 25, id(wpng_13));
          }
          else if (id(curent_weather).state == "windy-variant")
          {
             it.image(5, 25, id(wpng_14));
          }
          else if (id(curent_weather).state == "exceptional")
          {
             it.image(5, 25, id(wpng_15));
          }
          else
          {
             it.image(5, 25, id(wpng_0));
          }
          
          /* HA link status */
          if (id(ha_online) == true)
          {
            it.image(1, 1, id(ha_ok));
          } else {
            it.image(1, 1, id(ha_ko));
          }    

          /* heating on icon */
          if (id(heater_relay).state) 
          {
            it.image(45, 1, id(imgHeatingOn));
          }      
          
          /* Temperature */
          if (id(outside_temperature).has_state()) 
          {
            it.printf(95, 204, id(taoma40),  0xFFFF, TextAlign::BASELINE_RIGHT, "%.0f°C", id(outside_temperature).state);
          }
          
          /* Time */
          it.strftime(67, 235, id(taoma20), 0x767E, TextAlign::BASELINE_CENTER, "%H:%M", id(esptime).now());
      - id: page2
        # thermostat status
        lambda: |-
          it.set_rotation(DISPLAY_ROTATION_0_DEGREES);
          /* HA link status */
          if (id(ha_online) == true)
          {
            it.image(1, 1, id(ha_ok));
          } else {
            it.image(1, 1, id(ha_ko));
          }
          
          /* heating on icon */
          if (id(heater_relay).state) 
          {
            it.image(45, 1, id(imgHeatingOn));
          }
          
          /* Thermostat */

          it.printf(1, 80, id(taoma40),  0xFFFF, TextAlign::BASELINE_LEFT, "%.1f°C", id(heating_controller).target_temperature);
          it.printf(10, 85, id(taoma20),  0xFFFF, "Target");
          
          it.printf(1, 150, id(taoma40), 0xFFFF, TextAlign::BASELINE_LEFT, "%.1f°C", id(heating_controller).current_temperature);
          if (id(isTemperatureInternal) == true) {
            it.printf(10, 155, id(taoma20),  id(orange), "Current (l)");
          } else {
            it.printf(10, 155, id(taoma20),  0xFFFF, "Current");
          }
          /* boost countdown */

          if (id(boostMode) == true) {
            it.printf(1, 210, id(taoma20), id(light_red), TextAlign::BASELINE_LEFT, "BOOST");
            it.printf(135,210, id(taoma20), 0xFFFF, TextAlign::BASELINE_RIGHT, "%2d:%2d", (id(boostCountdownSec)% 3600)/60, id(boostCountdownSec)%60);

          } else {
            /* Thermostat mode */
            auto hcMode = id(heating_controller).mode;
            switch(hcMode) {
              case CLIMATE_MODE_OFF:
                // Off
                it.printf(1, 210, id(taoma20), 0x8080, TextAlign::BASELINE_LEFT, "OFF");
                break;
              case CLIMATE_MODE_AUTO:
                // Auto
                it.printf(1, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_LEFT, "AUTO");
                break;
              case CLIMATE_MODE_COOL:
                // Cool
                it.printf(1, 210, id(taoma20), 0xFFFF, TextAlign::BASELINE_LEFT, "COOL");
                break;
              case CLIMATE_MODE_HEAT:
                // Heat
                it.printf(1, 210, id(taoma20), 0xF800, TextAlign::BASELINE_LEFT, "HEAT");
                break;
              default:
                // code block
                it.printf(1, 210, id(taoma20), 0xFFFF, TextAlign::BASELINE_LEFT, "---");
                break;
            };
          
             
            /* HA Automation mode */

            switch (id(programmingMode)) {
              case 0:
                it.printf(135, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_RIGHT, "     ");
                break;
              case 1:
                it.printf(135, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_RIGHT, "Off");
                break;
              case 2:
                it.printf(135, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_RIGHT, "Day");
                break;
              case 3:
                it.printf(135, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_RIGHT, "Night");
                break;
              case 4:
                it.printf(135, 210, id(taoma20), 0xFC20, TextAlign::BASELINE_RIGHT, "Manual");
                break;
              case 10:
                it.printf(135, 210, id(taoma20), id(light_red), TextAlign::BASELINE_RIGHT, "Self");
                break;
                
              default:
                break;
            };
          }
          
          /* Time */
          it.strftime(67, 235, id(taoma20), 0x767E, TextAlign::BASELINE_CENTER, "%H:%M", id(esptime).now());
          
      - id: page3
      # system info
        lambda: |-
          it.set_rotation(DISPLAY_ROTATION_0_DEGREES);

          it.printf(1, 5, id(taoma20), 0xFFFF, "HA link:");
          if (id(ha_online) == true) {
              it.printf(100, 5, id(taoma20), 0xFFFF, "OK");
          } else {
              it.printf(100, 5, id(taoma20), id(light_red), "KO");
          }
          it.printf(1,  35, id(taoma20), 0xFFFF, "IP Address:");
          it.printf(1,  65, id(taoma20), 0xFF00, WiFi.localIP().toString().c_str());
          it.printf(1, 95, id(taoma20), 0xFFFF, "SSID:");
          it.printf(1, 115, id(taoma20), 0xFF00,  WiFi.SSID().c_str());
          it.printf(1, 155, id(taoma20), 0xFFFF, "Mac:");
          it.printf(1, 185, id(taoma20), 0xFF00,  get_mac_address_pretty().c_str() );


          

sensor:
  - platform: homeassistant
    id: outside_temperature
    entity_id: "${haWeatherSensorName}"
    
  - platform: homeassistant
    id: internal_temperature
    entity_id: "${haEnvironmentSensorName}"

  - platform: dht
    model: dht11
    pin: 
      number: GPIO13
      mode: INPUT_PULLUP
    id: local_sensor
    temperature:
      name: "Thermostat Temperature"
      id: local_temperature
    humidity:
      name: "Thermostat Humidity"
      id: local_humidity
    update_interval: 60s
    
  - platform: template
    name: "Temperature Sensor"
    id: temp_sensor_combined
    lambda: |-
      if ( (id(ha_online) == true) && (id(internal_temperature).has_state())) {
        // return ha temperature
        id(isTemperatureInternal) = false;
        return id(internal_temperature).state;
      } else {
        // return internal temperature
        id(isTemperatureInternal) = true;
        return id(local_temperature).state;
      }
    update_interval: 60s

  - platform: homeassistant
    id: boostDurationHA
    entity_id: input_number.thermostat_boost_time_duration

  - platform: template
    name: "Boost Duration"
    id: boostDuration
    lambda: |-
        if (id(boostDurationHA).has_state()) {
          return id(boostDurationHA).state;
        } else {
          return id(boostDurationMinFallback);
        }

    
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotaryEncoder
    pin_a: GPIO37
    pin_b: GPIO38
    max_value: 300
    min_value: 100
    on_value:
      then:
        - climate.control:
            id: heating_controller
            target_temperature: !lambda "return x/10;"
        - display.page.show: page2
        - component.update: st7789vdisplay
        - script.execute: resetIdleTimer
    internal: true
  


text_sensor:
  - platform: homeassistant
    id: curent_weather
    entity_id: weather.yorkhome
    # internal: true
  
  - platform: template
    name: 'Thermostat Boost Remaining Time'
    id: boostRemainigtimePublisher
    internal: false
    lambda: "return to_string(id(boostCountdownSec));"
      
  - platform: wifi_info
    ip_address:
      id: localNetIPAddress
      name: "Thermostat IP Address"
    ssid:
      id: localNetSSID
      name: "Thermostat connected SSID"
    mac_address:
      id: localNetMACAddress
      name: "Thermostat MAC Address"

  - platform: homeassistant
    id: currentHeatingProgram
    entity_id: input_select.actual_heating_mode
    on_value:
      then:
        - lambda: |-
            if (x == "Off") { 
              id(programmingMode) = 1;
            } else if (x == "ECO") {
                id(programmingMode) = 3;
            } else if (x == "DAY") {
                id(programmingMode) = 2;
            } else if (x == "Manual") {
                id(programmingMode) = 4;
            } else {
                id(programmingMode) = 0;
            };
            
  


switch:
  - platform: gpio
    pin: GPIO4
    name: "Backlight"
    id: backlight
    
  - platform: gpio
    pin: GPIO2
    name: "Heater Relay"
    id: heater_relay
  
  - platform: template
    name: "Thermostat Boost"
    id: switchThermostatBoost
    lambda: |-
      if (id(boostMode) == true) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      - script.execute: execBoostMode
    turn_off_action:
      - script.execute: cancelBoostMode

binary_sensor:  
  - platform: gpio
    id: toggleBL
    pin: GPIO0
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - switch.toggle: backlight
        - script.execute: resetIdleTimer
        
  - platform: gpio
    pin: GPIO39
    name: "Rotary Switch Button"
    id: rotarysw_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at least 3s 
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Long Clicked"
          - script.execute: cancelBoostMode
          - script.execute: resetIdleTimer
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Short Clicked"
          - script.execute: execBoostMode
          - script.execute: resetIdleTimer
    internal: true

  - platform: gpio
    pin: GPIO35
    name: "Page"
    id: page
    internal: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press:
      then:
        - display.page.show_next: st7789vdisplay
        - script.execute: resetIdleTimer

  - platform: template
    name: "Thermostat boost mode"
    id: boostModeSensor
    internal: false
    lambda: |-
      if (id(boostMode) == true) {
        return true;
      } else {
        return false;
      }


interval:
  - interval: 5s
    then:
     - if:
        condition:
          api.connected:
        then:
          - globals.set:
              id: ha_online
              value: 'true'
        else:
          - globals.set:
              id: ha_online
              value: 'false'   
     # screensaver page switcher
     - if: 
        condition:
          lambda: "return id(idleTimeoutCounter) >= 180;"
        then:
          - lambda: "id(idleTimeoutCounter) = 0;"
          - display.page.show_next: st7789vdisplay
          
  - interval: 1min
    then:
      - if:
          condition:
            not:
              api.connected:
          then:
            - if:
                condition:
                  lambda: 'return id(haOfflineCounter) >= 5;'
                then:
                  - logger.log: "HA Offline for at least 5 min. Switching to autonomous mode."
                  - script.execute: enterAutonomousMode
                else:
                  - logger.log: "HA Offline. Incrementing counter..."
                  - lambda: 'id(haOfflineCounter) += 1;'
          else:
            - lambda: 'id(haOfflineCounter) = 0;'
            - script.execute: exitAutonomousMode
  - interval: 1s
    then:
      # boost management
      - if:
          condition:
            lambda: "return id(boostMode);"
          then:
            - globals.set:
                id: boostCountdownSec
                value: !lambda "return (id(boostCountdownSec) - 1);"
            - text_sensor.template.publish:
                id: boostRemainigtimePublisher
                state: !lambda "return to_string(id(boostCountdownSec));"
            - logger.log:
                format: "Remaining time on boost: %d seconds"
                args: [ 'id(boostCountdownSec)' ]
      # idle/screensaver counter
      - lambda: "id(idleTimeoutCounter)+=1;"
            

script:
  - id: enterAutonomousMode
    then:
      - lambda: 'id(autonomousMode) = true;'
  - id: exitAutonomousMode
    then:
      - lambda: 'id(autonomousMode) = false;'
  - id: resetIdleTimer
    then:
      - lambda: 'id(idleTimeoutCounter) = 0;'

  - id: execBoostMode
    mode: restart
    then:
      - display.page.show: page2
      - component.update: st7789vdisplay
      - globals.set:
          id: boostMode
          value: 'true'
      - globals.set:
          id: boostCountdownSec
          value: !lambda "return 60 * id(boostDuration).state;"
      - switch.turn_on: heater_relay
      # - delay: !lambda "return 60 * id(boostDuration).state + ' sec'; "
      - wait_until:
        - lambda: "return (id(boostCountdownSec) <= 0);"
      - switch.turn_off: heater_relay
      - globals.set:
          id: boostMode
          value: 'false'
      # Set boostmode sensor

  - id: cancelBoostMode
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return id(boostMode);'
          then:
            - logger.log: "Stopping boost mode!"
            - script.stop: execBoostMode
            - switch.turn_off: heater_relay
            - globals.set:
                id: boostMode
                value: 'false'
            - globals.set:
                id: boostCountdownSec
                value: !lambda "return 60 * id(boostDuration).state;"


time:
  #- platform: homeassistant
  - platform: sntp
    timezone: "Europe/London" 
    id: esptime

climate:
  - platform: thermostat
    id: heating_controller
    name: "Heating Controller"
    sensor: temp_sensor_combined
    default_target_temperature_low: 20
    hysteresis: 0.4
    heat_action:
      - switch.turn_on: heater_relay
    idle_action:
      - switch.turn_off: heater_relay
